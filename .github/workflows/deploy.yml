name: Deploy

on:
  push:
    branches:
      - master

env:
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SSH_KEY: ${{ secrets.SSH_KEY }}
  PATH_TO_PROJECT: "C:/Users/rosel/myPROJECTS/myTGassistant"

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
      - name: Install OpenSSH Client
        shell: powershell
        run: |
          Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.24.1"

      - name: Build
        run: go build -o app.exe
      - name: Add known_hosts SSH
        run: |
          #Обновляем known_hosts
          # Создаем .ssh директорию
          New-Item -Path "$env:USERPROFILE\.ssh" -ItemType Directory -Force

          # Добавляем хост в known_hosts
          ssh-keyscan $env:SERVER_IP >> "$env:USERPROFILE\.ssh\known_hosts"

      - name: Deploy to Server
        shell: powershell
        run: |
          # Создаем .ssh директорию
          New-Item -Path "$env:USERPROFILE\.ssh" -ItemType Directory -Force

          # Добавляем хост в known_hosts
          ssh-keyscan $env:SERVER_IP >> "$env:USERPROFILE\.ssh\known_hosts"

          # Создаем файл ssh-ключа
          $env:SSH_KEY | Out-File -FilePath deploy_key -Encoding ASCII

          # Устанавливаем минимальные права (только для текущего пользователя)
          $keyPath = ".\deploy_key"
          $acl = Get-Acl -Path $keyPath
          $acl.SetAccessRuleProtection($true, $false)
          $acl.Access | ForEach-Object { $acl.RemoveAccessRule($_) } | Out-Null
          $user = [System.Security.Principal.NTAccount]($env:USERNAME)
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(
              $user,
              "Read",
              "Allow"
          )
          $acl.AddAccessRule($accessRule)
          Set-Acl -Path $keyPath -AclObject $acl

          # Команды для выполнения на сервере с исправлением кодировки
          $commands = @(
              "chcp 65001",  # Устанавливаем UTF-8 кодировку
              "cd '$env:PATH_TO_PROJECT'",
              "git pull origin master",
              ".\deploy.ps1"
          )
          $remoteCommand = [string]::Join("; ", $commands)

          # Выполняем команды через SSH
          ssh -i deploy_key $env:SERVER_USER@$env:SERVER_IP $remoteCommand

          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error] Deployment failed!"
              exit 1
          }
